/* vim: set filetype=cpp : */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define PUQ  0
#define NEO3 1
#define NEO4 2
#define FUNC 3

#define COMBO_TIMEOUT_SHORT 40 // fingers on or above home row
#define COMBO_TIMEOUT_MEDIUM 70 // fingers below homerow
#define COMBO_TIMEOUT_LONG 100 // press with fingers of different hands

#define BULLET LA(LEFT_BRACKET)
#define DASH LA(SLASH)
#define DE_Y Z
#define DE_Z Y
#define DE_MINUS SLASH
#define DE_UNDER LS(SLASH)
#define DE_HASH BACKSLASH
#define DE_SINGLE_QUOTE LS(DE_HASH)

// &lt {
//     quick_tap_ms = <170>;
// };

&caps_word {
    // CTRL-F13 is my umlaut-prefix
    continue-list = <DE_UNDER MINUS BACKSPACE F13>;
};

/ {
    macros {
        my_menu: my_menu {
            label = "My Menu Key";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LCMD>
                , <&macro_tap &kp LCMD>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp F10>
                , <&macro_release &kp LSHFT>
                ;
        };
    };
};

// zilpzalp key numbers
//        ______________              ______________
//       |  0 |  1 |  2 |----    ----|  5 |  6 |  7 |
//       |----|----|----|  3 |  |  4 |----|----|----|
//    ---|  9 | 10 | 11 |----|  |----| 14 | 15 | 16 |----
//   | 8 |----|----|----| 12 |  | 13 |----|----|----| 17 |
//    ---| 18 | 19 | 20 |----    ----| 21 | 22 | 23 |----
//        ----|----|----|            |----|----|----
//            | 24 | 25 |            | 26 | 27 |
//             ---------              ---------

/ {
    combos {
        compatible = "zmk,combos";

        // missing characters on base layer:
        combo_f_left {
            key-positions = <0 1>;
            bindings = <&kp F>;
            layers = <PUQ>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };
        combo_f_right {
            key-positions = <5 6>;
            bindings = <&kp F>;
            layers = <PUQ>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };
        combo_p_left {
            key-positions = <1 2>;
            bindings = <&kp P>;
            layers = <PUQ>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };
        combo_p_right {
            key-positions = <6 7>;
            bindings = <&kp P>;
            layers = <PUQ>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };
        combo_z {
            key-positions = <18 19>;
            bindings = <&kp DE_Z>;
            layers = <PUQ>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };
        combo_k {
            key-positions = <22 23>;
            bindings = <&kp K>;
            layers = <PUQ>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };
        combo_j {
            key-positions = <19 20>;
            bindings = <&kp J>;
            layers = <PUQ>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };
        combo_x {
            key-positions = <21 22>;
            bindings = <&kp X>;
            layers = <PUQ>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };

        // Special Characters on NEO3:
        combo_hash {
            key-positions = <18 19>;
            bindings = <&kp DE_HASH>;
            layers = <NEO3>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };
        combo_backtick {
            key-positions = <19 20>;
            bindings = <&kp LS(EQUAL)>;
            layers = <NEO3>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };
        combo_plus {
            key-positions = <21 22>;
            bindings = <&kp RIGHT_BRACKET>;
            layers = <NEO3>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };
        combo_ampersand {
            key-positions = <6 7>;
            bindings = <&kp LS(N6)>;
            layers = <NEO3>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };
        combo_semicolon {
            key-positions = <22 23>;
            bindings = <&kp LS(COMMA)>;
            layers = <NEO3>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };

        // Missing controls on NEO4:
        combo_pg_up {
            key-positions = <0 1>;
            bindings = <&kp PG_UP>;
            layers = <NEO4>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };

        // Keypad Operators:
        combo_kp_minus {
            key-positions = <22 23>;
            bindings = <&kp KP_MINUS>;
            layers = <NEO4>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };
        combo_kp_plus {
            key-positions = <15 16>;
            bindings = <&kp KP_PLUS>;
            layers = <NEO4>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };
        combo_kp_multiply {
            key-positions = <5 6>;
            bindings = <&kp KP_MULTIPLY>;
            layers = <NEO4>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };
        combo_kp_divide {
            key-positions = <6 14>;
            bindings = <&kp KP_DIVIDE>;
            layers = <NEO4>;
            timeout-ms = <COMBO_TIMEOUT_MEDIUM>;
        };
        combo_kp_dot {
            key-positions = <21 22>;
            bindings = <&kp KP_DOT>;
            layers = <NEO4>;
            timeout-ms = <COMBO_TIMEOUT_SHORT>;
        };

        // CAPS WORD
        combo_caps_word {
            key-positions = <24 27>;
            bindings = <&caps_word>;
            timeout-ms = <COMBO_TIMEOUT_LONG>;
        };
    };
};


/ {

    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys:
            // hold-trigger-key-positions = <4 5 6 7 13 14 15 16 17 21 22 23 24 25 26 27>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys:
            // hold-trigger-key-positions = <0 1 2 3 8 9 10 11 12 18 19 20 24 25 26 27>;
        };

        mylt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            label = "my layer taps";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&mo &kp>, <&kp>;
            // non-thumb keys:
            // hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23>;
        };

        comma_sh_dash: comma_sh_dash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SH_DASH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp DASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_sh_bullet: dot_sh_bullet {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SH_BULLET";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp BULLET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_dot_blt: mod_dot_sh_bullet {
            compatible = "zmk,behavior-hold-tap";
            label = "mod_dot_sh_bullet";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&dot_sh_bullet>;
        };
/*
        cagm: ctl_alt_gui_morph {
            // I defined CTRL-ALT-GUI shortcuts in BetterTouchTool. Some keys are not recognized
            // when combined with these modifiers, so we map them to something else.
            compatible = "zmk,behavior-mod-morph";
            label = "CTL_ALT_GUI_MORPH";
            #binding-cells = <2>; <--- wrong!!! - must be <0>
            bindings = <&kp>, <&kp>;
            mods = <(MOD_LCTL|MOD_RCTL) (MOD_LALT|MOD_RALT) (MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>; 
        };
*/
    };
};

/ {

    keymap {
        compatible = "zmk,keymap";

        puq_mirrored {
            label = "PUQ";
            bindings = <
                //
                               &kp        M   &kp       L    &kp       C        &hl LC(LCMD)     G  &hr RC(RCMD)     Q  &comma_sh_dash      &kp LC(F13)           &kp        U
                //
                &mylt NEO3 S   &mylt NEO4 N   &hl LGUI  R    &hl LALT  T        &hl LC(LA(LCMD)) D  &hr RC(RA(RCMD)) O  &hr RALT  A         &hr RGUI  E           &mylt NEO4 I  &mylt NEO3 H
                //                                                                                                      &cagm DE_UNDER N1 (TODO: is this required?)
                               &kp        B   &hl LCTRL W    &kp       V                                                &kp       DE_UNDER  &mod_dot_blt RCTRL 0  &kp     DE_Y
                //
                                                             &hl LSHFT SPACE    &mylt FUNC ESC      &mylt FUNC ENTER    &hr RSHFT SPACE
            >;
        };

        neo_layer_3 {
            label = "NEO3";
            bindings = <
                //                 â€¦              [              ]                  ^                   !                   <                  >        &      =
                               &kp LA(DOT)    &kp LA(N5)     &kp LA(N6)         &kp GRAVE           &kp LS(N1)          &kp NUBS           &kp LS(NUBS)    &kp LS(N0)
                //  \              /              {              }                  *                   ?                   (                  )               -                   :
                &kp LS(LA(N7)) &kp LS(N7)     &kp LA(N8)     &kp LA(N9)         &kp LS(RBKT)        &kp LS(MINUS)       &kp LS(N8)         &kp LS(N9)      &kp DE_MINUS        &kp LS(DOT)
                //                 $       #      |       `      ~                                                          %         +        "        ;      '
                               &kp LS(N4)     &kp LA(N7)     &kp LA(N)                                                  &kp LS(N5)         &kp LS(N2)      &kp DE_SINGLE_QUOTE
                //
                                                             &kp SPACE          &kp ESC             &kp ENTER           &kp SPACE
            >;
        };

        neo_layer_4 {
            label = "NEO4";
            bindings = <
                //
                               &kp BSPC       &kp UP           &kp DEL             &kp PG_DN          &none               &kp       KP_N7    &kp       KP_N8  &kp KP_N9
                //
                &kp LG(LEFT)   &kp LEFT       &hl LGUI DOWN    &hl LALT  RIGHT     &kp LG(RIGHT)      &none               &hr RALT  KP_N4    &hr RGUI  KP_N5  &kp KP_N6  &kp KP_PLUS
                //
                               &kp TAB        &hl LCTL INSERT  &kp       ENTER                                            &kp       KP_N1    &hr RCTRL KP_N2  &kp KP_N3
                //
                                                               &hl LSHFT SPACE     &kp ESC            &kp ENTER           &hr RSHFT KP_N0
            >;
        };

        function {
            label = "FUNC";
            bindings = <
                //
                               &kp F7         &kp F8         &kp F9             &kp F10             &none               &kp      C_VOL_DN  &kp      C_MUTE  &kp C_VOL_UP
                //
                &kp F12        &kp F4         &kp F5         &kp F6             &kp F11             &sk RC(RA(RCMD))    &hr RALT C_PREV    &hr RCMD C_PP    &kp C_NEXT    &my_menu
                //
                               &kp F1         &kp F2         &kp F3                                                     &kp      C_BRI_DN  &kp      RCTRL   &kp C_BRI_UP
                //                                           with BetterTouchTool, map F16 to Left Mouse Button; F17 to Right Mouse Button
                                                             &hl LSHFT F16      &kp F17             &kp F16             &hr RSHFT F17
            >;
        };

    };
};
